#!/usr/bin/env python
import os
import subprocess

project_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..")
tests_path = os.path.join(project_path, 'tests')

def run_folder_tests(folder_path, test_name=""):
  subfolders = [item for item in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, item))]
  
  # If at leaf folder, run test
  if len(subfolders) == 0:
    run_test(folder_path, test_name)
  else:
    subfolders.reverse()
    for subfolder in subfolders:
      run_folder_tests(os.path.join(folder_path, subfolder), os.path.join(test_name, subfolder))

def run_test(test_path, test_name):
  test_results = ["FAILED", "PASSED"]

  # Load test files
  precompiled = open(os.path.join(test_path, 'precompiled.go'), "r").read()
  output = open(os.path.join(test_path, 'output'), "r").read()

  # Run compiler against test case
  original_file_path = os.path.join(test_path, 'original.goa')
  os.popen('go run %s %s' % (project_path, original_file_path)).read()

  # Run precompiled code
  result_precompiled_file_path = os.path.join(project_path, 'out/output.go')
  result_precompiled = open(result_precompiled_file_path, "r").read()
  process = subprocess.Popen(['go', 'run', result_precompiled_file_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  _, result_output = process.communicate()

  # Compare result to test expected output
  print("TEST %s %s" % (test_name, test_results[result_precompiled == precompiled and result_output == output]))

if __name__ == "__main__":
  run_folder_tests(tests_path)